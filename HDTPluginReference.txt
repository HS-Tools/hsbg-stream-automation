// 1. Settings Class (inherits from PluginSettings)
[Serializable]
public class MyPluginSettings : PluginSettings
{
    [DefaultValue(true)]
    public bool EnableFeature { get; set; }
    
    [DefaultValue("Default Name")]
    public string PlayerName { get; set; }
    
    public override void Save()
    {
        Save(Config.Instance);
    }
}

// 2. Settings User Control (WPF XAML + code-behind)
public partial class MyPluginConfig : UserControl, IPluginConfigurable
{
    private MyPluginSettings _settings;

    public MyPluginConfig()
    {
        InitializeComponent();
        _settings = new MyPluginSettings().Load<MyPluginSettings>() ?? new MyPluginSettings();
        DataContext = _settings;
    }

    public UserControl ConfigPanel => this;

    public void SaveSettings()
    {
        _settings.Save();
    }

    // XAML (MyPluginConfig.xaml):
    /*
    <StackPanel>
        <CheckBox Content="Enable Feature" IsChecked="{Binding EnableFeature}"/>
        <TextBox Text="{Binding PlayerName}" Margin="0 5 0 0"/>
    </StackPanel>
    */
}

// 3. Plugin Integration
public class MyPlugin : IPlugin
{
    private MyPluginSettings _settings;

    public MyPlugin()
    {
        _settings = new MyPluginSettings().Load<MyPluginSettings>();
    }

    public void OnButtonPress()
    {
        var config = new MyPluginConfig();
        return config;
    }

    // ... other required plugin methods
}